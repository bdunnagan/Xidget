/**
 * Xidget - UI Toolkit based on XModel
 * Copyright 2009 Bob Dunnagan. All rights reserved.
 */
package org.xidget.config;

import java.util.HashMap;
import java.util.Map;
import org.xidget.IXidget;
import org.xmodel.IModelObject;

/**
 * A class which handles the bidirectional association of xidgets to the configuration
 * elements that generated them. The mapping exists for the life of the tag processor
 * representing the instantiation of a configuration.
 */
public class XidgetMap
{
  public XidgetMap()
  {
    xidgets = new HashMap<IModelObject, IXidget>();
    configs = new HashMap<IXidget, IModelObject>();
  }
  
  /**
   * Add an association to the map.
   * @param xidget The xidget.
   * @param element The configuration element.
   */
  public void add( IXidget xidget, IModelObject element)
  {
    xidgets.put( element, xidget);
    configs.put( xidget, element);
  }
  
  /**
   * Remove the specified xidget from the map.
   * @param xidget The xidget.
   */
  public void remove( IXidget xidget)
  {
    IModelObject config = configs.remove( xidget);
    if ( config != null) xidgets.remove( config);
  }
  
  /**
   * Returns the last xidget generated by the specified configuration element.
   * @param element The element.
   * @return Returns the last xidget generated by the specified configuration element.
   */
  public IXidget getXidget( IModelObject element)
  {
    return xidgets.get( element);
  }
  
  /**
   * Returns the configuration element that generated the specified xidget.
   * @param xidget The xidget.
   * @return Returns the configuration element that generated the specified xidget.
   */
  public IModelObject getConfig( IXidget xidget)
  {
    return configs.get( xidget);
  }
  
  private Map<IModelObject, IXidget> xidgets;
  private Map<IXidget, IModelObject> configs;
}

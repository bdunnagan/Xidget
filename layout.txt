Layout Bounds Rules

1. Widgets have preferred size, specified size and computed size.
2. Specified size takes precedence over preferred size.
3. Computed size depends on the other two, plus layout rules, which amount to specified size.


So, the algorithm has to know what dimensions of a widget are controlled by layout.
These dimensions will be computed.  The other dimensions will not.

Q: Is it possible for a dimension to change dynamically between constrained and unconstrained?
A: Don't cache whether a dimension is constrained.  After each layout when the bounds are being
   updated, set the computed bounds for unconstrained dimensions to -1.  Then, apply the rules
   above.
   
   
New Design Only Involves Changes to Swing

. Do not use Swing LayoutManagers - allow xidget framework to perform layout as life-cycle phase.

  Create
  Layout
  Bind
  Show
  
. IWidgetFeature.setComputedSize will no longer call setDefaultSize. Instead, ILayoutFeature will
  use getComputedSize for each xidget, and getComputedSize will call getDefaultSize if one of the
  dimensions is unspecified.
  
  So it should not be necessary to have internal braces.  IWidgetFeature could have separate methods
  for getting and setting each bound, since this is what ILayoutFeature wants to do. When ILayoutFeature
  needs to get the right/bottom side of a widget, it can call IWidgetFeature.getRightSide(), getBottomSide().
  ILayoutFeature will implement a bottom-up layout by default. 

